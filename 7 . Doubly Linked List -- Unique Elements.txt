#include<iostream>using namespace std;struct Node{    int data;    Node* forward;    Node* backward;};struct ListHead{    int count;    Node* front;    Node* rear;};class DoublyLinkedList{    ListHead* newlist;    int status = 0;    public:    void createDLL(){        if(statusDLL() == 0){            newlist = new ListHead;            newlist->count = 0;            newlist->front = NULL;            newlist->rear = NULL;            status = 1;            cout<<"Doubly linked list created "<<endl;        }        else            cout<<"Doubly linked list was already created"<<endl;    }    bool emptyDLL(){        if(statusDLL() == 1){            if(newlist->count == 0)                return true;            else                return false;        }        else            return false;    }    bool searchDLL(Node*& predecessor,Node*& successor,int data){        predecessor = NULL;        successor = newlist->front;        while(successor!=NULL && successor->data < data){            predecessor = successor;            successor = successor->forward;        }        if(successor == NULL){            return false;        }        else{            if(successor->data == data)                return true;            else                return false;        }    }    bool insertDLL(int data){        Node* predecessor = new Node;        Node* location = new Node;        if(statusDLL() == 1){            bool found = searchDLL(predecessor,location,data);            if(!found){                Node* newnode = new Node;                newnode->data = data;                if(predecessor == NULL){                    newnode->backward = NULL;                    if(emptyDLL())                        newlist->rear = newnode;                    newnode->forward = newlist->front;                    newlist->front = newnode;                }                else{                    newnode->forward = predecessor->forward;                    predecessor->forward = newnode;                    newnode->backward = predecessor;                }                if(location == NULL)                    newlist->rear = newnode;                else                    location->backward = newnode;                newlist->count+= 1;                return true;            }            else                return false;        }        else            return false;       }    int elementFromFrontDLL(){        if(statusDLL() == 1)            return newlist->front->data;        else            return -1;    }    int elementFromRearDLL(){        if(statusDLL() == 1)            return newlist->rear->data;        else            return -1;    }    int countDLL(){        if(statusDLL() == 1)            return newlist->count;        else            return -1;    }    bool deleteDLL(int data) {        Node* predecessor = new Node;        Node* deletenode = new Node;        if(statusDLL() == 1){            bool found = searchDLL(predecessor, deletenode, data);            if (found) {                if (predecessor == NULL) {                    if (deletenode->forward != NULL)                         deletenode->forward->backward = NULL;                    else                         newlist->rear = NULL;                    newlist->front = deletenode->forward;                }                 else                     predecessor->forward = deletenode->forward;                if (deletenode->forward != NULL)                     deletenode->forward->backward = predecessor;                else                     newlist->rear = predecessor;                newlist->count -= 1;                 delete deletenode;                 return true;            }             else                 return false;        }        else            return false;    }    void destroyDLL(){        if(statusDLL() == 1){            Node* deletenode;            Node* walker = newlist->front;            while(walker!=NULL){                deletenode = walker;                walker = walker->forward;                delete(deletenode);            }            newlist->count = 0;            newlist->front = NULL;            newlist->rear = NULL;            status = 0;            delete(newlist);        }    }    int statusDLL(){        return status;    }    int getElementDLL(){        int data;        cout<<"Enter data for Doubly Linked List :";        cin>>data;        return data;    }    void displayFromFrontDLL(){        if(statusDLL() == 1){            Node* walker = newlist->front;            while(walker!=NULL){                cout<<walker->data<<" ";                walker = walker->forward;            }        }        else            cout<<"Create a Doubly linked list to start."<<endl;    }    void displayFromRearDLL() {    if (statusDLL() == 1) {        Node* walker = newlist->rear;        while (walker != NULL) {            cout << walker->data << " ";            walker = walker->backward;        }    } else {        cout << "Create a Doubly linked list to start." << endl;    }}    int searchFromFrontDLL(int data){        if(statusDLL() == 1){            int index = 1;            Node* walker = newlist->front;            while(walker!=NULL){                if(walker->data == data)                    return index;                walker = walker->forward;                index+=1;            }            return -1;        }        else{            cout<<"Create a Doubly linked list to start."<<endl;            return -1;        }    }    int searchFromRearDLL(int data) {    if (statusDLL() == 1) {        int index = 1;        Node* walker = newlist->rear;        while (walker != NULL) {            if (walker->data == data)                return index;            walker = walker->backward;            index += 1;        }        return -1;     }    else {        cout << "Create a Doubly linked list to start." << endl;        return -1;    }}};int main(){    DoublyLinkedList myDLL;    int choice,data;    bool status;    bool not_quit = true;    cout<<"Doubly linked list Operations :-"<<endl;    cout<<"1.Create doubly linked list\n2.Insert into doubly linked list\n3.Check doubly linked list is empty\n4.Data from front of doubly linked list\n5.Data from rear of doubly linked list\n6.Delete from doubly linked list\n7.Count of elements in doubly linked list\n8.Destroy doubly linked list\n9.Display from front of doubly linked list\n10.Display from rear of doubly linked list\n11.Search from front of doubly linked list\n12.Search from rear of doubly linked list\n13.Quit"<<endl;    while(not_quit){        cout<<"Enter choice :";        cin>>choice;        switch(choice){            case 1:                myDLL.createDLL();                break;            case 2:                if(myDLL.statusDLL() == 1){                    data = myDLL.getElementDLL();                    status = myDLL.insertDLL(data);                    if(status == true)                        cout<<"The element was added into Doubly Linked List"<<endl;                    else                        cout<<"The element wasn't added into Doubly Linked List"<<endl;                }                else                    cout<<"Create Doubly linked list to start."<<endl;                break;            case 3:                if(myDLL.statusDLL() == 1){                    status = myDLL.emptyDLL();                    if(status == true)                        cout<<"The Doubly Linked List is empty"<<endl;                    else                        cout<<"The Doubly Linked List is not empty"<<endl;                }                else                    cout<<"Create Doubly linked list to start."<<endl;                break;            case 4:                if(myDLL.statusDLL() == 1){                    data = myDLL.elementFromFrontDLL();                    cout<<"The data at front of Doubly Linked List :"<<data<<endl;                }                else                    cout<<"Create Doubly linked list to start."<<endl;                break;            case 5:                if(myDLL.statusDLL() == 1){                    data = myDLL.elementFromRearDLL();                    cout<<"The data at rear of Doubly Linked List :"<<data<<endl;                }                else                    cout<<"Create Doubly linked list to start."<<endl;                break;            case 6:                if(myDLL.statusDLL() == 1){                    data = myDLL.getElementDLL();                    status = myDLL.deleteDLL(data);                    if(status == true)                        cout<<"The element was deleted from Doubly Linked List"<<endl;                    else                        cout<<"The element wasn't deleted from Doubly Linked List"<<endl;                }                else                    cout<<"Create Doubly linked list to start."<<endl;                break;            case 7:                if(myDLL.statusDLL() == 1){                    data = myDLL.countDLL();                    cout<<"The number of elements in Doubly Linked List :"<<data<<endl;                }                else                    cout<<"Create Doubly linked list to start."<<endl;                break;            case 8:                cout<<"Destroy Doubly Linked List initiated."<<endl;                if(myDLL.statusDLL() == 1){                    myDLL.destroyDLL();                    cout<<"Doubly Linked List was destroyed."<<endl;                }                else                   cout<<"Doubly Linked List was already destroyed."<<endl;                break;            case 9:                myDLL.displayFromFrontDLL();                cout<<endl;                break;            case 10:                myDLL.displayFromRearDLL();                cout<<endl;                break;            case 11:                if(myDLL.statusDLL() == 1){                    data = myDLL.getElementDLL();                    if(myDLL.searchFromFrontDLL(data) == -1)                        cout<<"The element wasn't found in the Doubly Linked List."<<endl;                    else                        cout<<"The element was found at :"<<myDLL.searchFromFrontDLL(data)<<endl;                }                else                    cout<<"Create Doubly linked list to start."<<endl;                break;            case 12:                if(myDLL.statusDLL() == 1){                    data = myDLL.getElementDLL();                    if(myDLL.searchFromRearDLL(data) == -1)                        cout<<"The element wasn't found in the Doubly Linked List."<<endl;                    else                        cout<<"The element was found at :"<<myDLL.searchFromRearDLL(data)<<endl;                }                else                    cout<<"Create Doubly linked list to start."<<endl;                break;            case 13:                not_quit = false;                break;        }    }}