#include <iostream>using namespace std;struct Node {    int data;    Node* link;};struct ListHead {    int count;    Node* front;    Node* rear;};class CircularSinglyLinkedList {    ListHead* newlist;public:    void createCSLL() {        newlist = new ListHead;        newlist->count = 0;        newlist->front = NULL;        newlist->rear = NULL;    }     bool searchCSLL(Node*& predecessor, Node*& successor, int data) {        predecessor = NULL;        successor = newlist->front;        if (emptyCSLL()) {            return false;        }        do {            if (successor->data == data) {                return true;            }            predecessor = successor;            successor = successor->link;        } while (successor != newlist->front);        return false;    }    bool insertCSLL(int data) {        Node* predecessor;        Node* location;        bool found = searchCSLL(predecessor, location, data);        Node* newnode = new Node;        newnode->data = data;        if (!found) {            if (predecessor == NULL) {                newnode->link = newlist->front;                newlist->front = newnode;                if (emptyCSLL()) {                    newlist->rear = newnode;                    newlist->rear->link = newlist->front;                } else {                    newlist->rear->link = newnode;                }            } else {                newnode->link = predecessor->link;                predecessor->link = newnode;                if (location->link == newlist->front) {                    newlist->rear = newnode;                }            }            newlist->count += 1;            return true;        } else {            return false;        }    }     bool deleteCSLL(int data) {    Node* predecessor;    Node* location;    bool found = searchCSLL(predecessor, location, data);    if (found) {        if (newlist->count == 1) {            newlist->front = NULL;            newlist->rear = NULL;        }         else {            if (predecessor == NULL) {                newlist->front = location->link;                newlist->rear->link = newlist->front;            }             else {                predecessor->link = location->link;                if (location == newlist->front) {                    newlist->front = location->link;                }                if (location == newlist->rear) {                    newlist->rear = predecessor;                }            }        }        delete location;        newlist->count -= 1;        return true;    } else {        return false;    }}     bool emptyCSLL() {        return (newlist->count == 0);    }    void displayFrontCSLL() {        if (newlist->front != NULL) {            cout << newlist->front->data << endl;        } else {            cout << "NULL" << endl;        }    }    void displayRearCSLL() {        if (newlist->rear != NULL) {            cout << newlist->rear->data << endl;        } else {            cout << "NULL" << endl;        }    }    void displayCSLL() {        Node* walker = newlist->front;        cout << "Displaying CSLL: ";        if (emptyCSLL()) {            cout << "NULL" << endl;        } else {            do {                cout << walker->data << " ";                walker = walker->link;            } while (walker != newlist->front);            cout << endl;        }    }   };int main() {    CircularSinglyLinkedList myCSLL;    int choice, data;    bool status;    bool not_quit = true;    cout << "Circular Singly Linked List Operations:" << endl;    cout << "1. Create Circular Singly Linked List\n2. Insert into Circular Singly Linked List\n3. Delete from Circular Singly Linked List\n4. Front node of Circular Singly Linked List\n5. Rear node of Circular Singly Linked List\n6. Display Circular Singly Linked List\n7. Quit" << endl;        while (not_quit) {        cout << "Enter choice: ";        cin >> choice;        switch (choice) {            case 1:                myCSLL.createCSLL();                cout << "Circular Singly Linked List was created" << endl;                break;            case 2:                cout << "Enter data to insert: ";                cin >> data;                status = myCSLL.insertCSLL(data);                if (status) {                    cout << "Inserted into Circular Singly Linked List." << endl;                } else {                    cout << "Insertion failed" << endl;                }                break;            case 3:                cout << "Enter data to delete: ";                cin >> data;                status = myCSLL.deleteCSLL(data);                if (status) {                    cout << "Deleted from Circular Singly Linked List." << endl;                } else {                    cout << "Deletion failed" << endl;                }                break;            case 4:                myCSLL.displayFrontCSLL();                break;            case 5:                myCSLL.displayRearCSLL();                break;            case 6:                myCSLL.displayCSLL();                break;            case 7:                not_quit = false;                break;        }    }    return 0;}