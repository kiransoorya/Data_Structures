#include <iostream>using namespace std;struct Node {    int data;    Node* front;    Node* back;};struct Listhead {    int count;    Node* front;    Node* rear;};class Circular_DoublyLinkedList {    Listhead* newlist;public:    void createCDLL() {         newlist = new Listhead;        newlist->count = 0;        newlist->front = NULL;        newlist->rear = NULL;    }    bool searchCDLL(Node*& predecessor, Node*& successor, int data) {        predecessor = NULL;        successor = newlist->front;        if (emptyCDLL()) {            return false;        }        if (successor->data == data) {            return true;        }        if (data < successor->data) {            return false;        }        predecessor = successor;        successor = successor->front;        while (successor != newlist->front && successor->data < data) {            predecessor = successor;            successor = successor->front;        }        if (successor == newlist->front) {            return false;        } else {            if (successor->data == data) {                return true;            } else {                return false;            }        }    }    bool emptyCDLL() {        return newlist->count == 0;    }    void insertCDLL(int data) {        Node* predecessor;        Node* location;        bool found = searchCDLL(predecessor, location, data);        if (!found) {            Node* newnode = new Node;            newnode->data = data;            if (predecessor == NULL) {                if (emptyCDLL()) {                    newlist->front = newnode;                    newlist->rear = newnode;                } else {                    newlist->front->back = newnode;                    newlist->rear->front = newnode;                }                newnode->back = newlist->rear;                newnode->front = newlist->front;                newlist->front = newnode;            } else {                newnode->front = location;                newnode->back = predecessor;                predecessor->front = newnode;                if (location == newlist->front) {                    newlist->rear = newnode;                }                location->back = newnode;            }            newlist->count += 1;            cout<<"Data was inserted into Circular Doubly Linked List"<<endl;        } else {            cout << "Element already exists." << endl;        }    }    void deleteCDLL(int data) {        Node* predecessor;        Node* deletenode;        bool found = searchCDLL(predecessor, deletenode, data);        if (found) {            if (newlist->count == 1) {                newlist->front = NULL;                newlist->rear = NULL;            } else {                if (predecessor != NULL) {                    predecessor->front = deletenode->front;                    deletenode->front->back = predecessor;                    if (deletenode == newlist->rear) {                        newlist->rear = predecessor;                    }                } else {                    newlist->front = deletenode->front;                    deletenode->front->back = deletenode->back;                    newlist->rear->front = deletenode->front;                }            }            delete deletenode;            newlist->count -= 1;            cout << "Element deleted successfully." << endl;        } else {            cout << "Element not found." << endl;        }    }    int countCDLL() {        return newlist->count;    }    int elementFromFrontCDLL() {        if (newlist->front != NULL) {            return newlist->front->data;        } else {            cout << "The list is empty." << endl;            return -1;  // Return a sentinel value to indicate an error        }    }    int elementFromRearCDLL() {        if (newlist->rear != NULL) {            return newlist->rear->data;        } else {            cout << "The list is empty." << endl;            return -1;  // Return a sentinel value to indicate an error        }    }    void displayFromRearCDLL() {        Node* walker = newlist->rear;        if (walker != NULL) {            cout << "Elements from rear: ";            cout << walker->data << " ";            walker = walker->back;            while (walker != newlist->rear) {                cout << walker->data << " ";                walker = walker->back;            }            cout << endl;        } else {            cout << "The list is empty." << endl;        }    }    void displayFromFrontCDLL() {        Node* walker = newlist->front;        if (walker != NULL) {            cout << "Elements from front: ";            cout << walker->data << " ";            walker = walker->front;            while (walker != newlist->front) {                cout << walker->data << " ";                walker = walker->front;            }            cout << endl;        } else {            cout << "The list is empty." << endl;        }    }     int searchFromFrontCDLL(int data){        int index = 1;        Node* walker = newlist->front;        while(walker!=NULL){            if(walker->data == data)                return index;            walker = walker->front;            index+=1;            }        return -1;    }    int searchFromRearCDLL(int data) {        int index = 1;        Node* walker = newlist->rear;        while (walker != NULL) {            if (walker->data == data)                return index;            walker = walker->back;            index += 1;        }        return -1;    }};int main() {    Circular_DoublyLinkedList myCDLL;    int choice, data;    cout << "Circular Doubly Linked List Menu:" << endl;    cout << "1. Create Circular Doubly Linked List \n2. Insert element to Circular Doubly Linked List\n3. Delete element from Circular Doubly Linked List\n4. Display count of elements in Circular Doubly Linked List\n5. Display element from front of Circular Doubly Linked List\n6. Display element from rear of Circular Doubly Linked List\n7. Display elements from front of Circular Doubly Linked List\n8. Display elements from rear of Circular Doubly Linked List\n9. Search from front of Circular Doubly Linked List\n10. Search from rear of Circular Doubly Linked List\n11. Exit"<< endl;    while (true) {        cout << "Enter your choice: ";        cin >> choice;        switch (choice) {            case 1:                myCDLL.createCDLL();                cout<<"Circular Doubly Linked List created."<<endl;                break;            case 2:                cout << "Enter data to insert :";                cin >> data;                myCDLL.insertCDLL(data);                                break;            case 3:                cout << "Enter data to delete :";                cin >> data;                myCDLL.deleteCDLL(data);                                break;            case 4:                cout << "Count of elements in the CDLL :" << myCDLL.countCDLL() << endl;                break;            case 5:                cout << "Displaying element from front :" << myCDLL.elementFromFrontCDLL() << endl;                break;            case 6:                cout << "Displaying element from rear :" << myCDLL.elementFromRearCDLL() << endl;                break;            case 7:                myCDLL.displayFromFrontCDLL();                break;            case 8:                myCDLL.displayFromRearCDLL();                break;            case 9:                cout << "Enter data to search :";                cin >> data;                cout << "Found element at :" << myCDLL.searchFromFrontCDLL(data)<<endl;                break;            case 10:                cout << "Enter data to search :";                cin >> data;                cout << "Found element at :" << myCDLL.searchFromRearCDLL(data)<<endl;                break;            case 11:                cout << "Exiting the program." << endl;                return 0;            default:                cout << "Invalid choice. Please enter a valid option." << endl;        }    }    return 0;}