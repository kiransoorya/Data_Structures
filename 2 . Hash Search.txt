#include <iostream>#define Max_size 10using namespace std;struct Node{    int data;    Node* link;};struct ListHead{    int count;    Node* first;};class HashedSearch{    ListHead* hashTable[Max_size];    public:        void createTable(){            for(int i = 0; i < Max_size;i++){                hashTable[i] = new ListHead;                hashTable[i]->count = 0;                hashTable[i]->first = NULL;            }        }        Node* createNode(int data){            Node* newnode = new Node;            newnode->data = data;            newnode->link =  NULL;            return newnode;        }        bool insertToHash(int data){            int hashIndex = data%Max_size;            Node* newnode = createNode(data);            newnode->link = hashTable[hashIndex]->first;            hashTable[hashIndex]->first = newnode;            hashTable[hashIndex]->count += 1;            return true;        }        bool deleteFromHash(int deletedata){            int hashIndex = deletedata%Max_size;            Node* deleteNode;            deleteNode = hashTable[hashIndex]->first;            Node* pred = NULL;            while(deleteNode != NULL){                if(deleteNode->data == deletedata){                    if(pred == NULL){                        hashTable[hashIndex]->first = deleteNode->link;                    }                    else{                        pred->link == deleteNode->link;                    }                    hashTable[hashIndex]->count -= 1;                    return true;                }                pred = deleteNode;                deleteNode = deleteNode->link;            }            return false;        }        bool searchFromHash(int data,int& locn){            int hashIndex = data%Max_size;            Node* searchNode = hashTable[hashIndex]->first;            while(searchNode != NULL){                if(searchNode->data == data){                    locn = hashIndex;                    return true;                }                searchNode = searchNode->link;            }            return false;        }        void display(){            int intwalker = 0;	        int size = 0;            while(intwalker < Max_size){                Node* walker = hashTable[intwalker]->first;                while(walker != NULL){                    cout<<walker->data<<" ";                    walker = walker->link;		            size +=1;                }                if(walker == NULL){	                    for(int i = Max_size; i>= size ;i--){	                        cout<<"E"<<" ";	                    }                        cout<<endl;                        size = 0;                }                            intwalker += 1;            }        }};int main(){    HashedSearch hashTable;    int choice;    cout<<"1 .Create table\n2 .Insert element\n3 .Delete element\n4 .Search element\n5 .Display Hash Table\n6 .Exit"<<endl;    do{        cout<<"Enter choice :";        cin>>choice;        switch(choice){            case 1:                hashTable.createTable();                cout<<"Table was created."<<endl;                break;            case 2:                int insertdata;                cout<<"Enter the data to insert :";                cin>>insertdata;                if(hashTable.insertToHash(insertdata)){                    cout<<insertdata<<" was inserted successfully."<<endl;                }                else{                    cout<<"Failed to insert key."<<endl;                }                break;            case 3:                int deletedata;                cout<<"Enter the data to delete :";                cin>>deletedata;                if(hashTable.deleteFromHash(deletedata)){                    cout<<deletedata<<" deleted successfully."<<endl;                }                else{                    cout<<"Key not found or failed to delete."<<endl;                }                break;            case 4:                int searchdata,location;                cout<<"Enter the data to search :"<<endl;                cin>>searchdata;                if(hashTable.searchFromHash(searchdata,location)){                    cout<<searchdata<<" was found at "<<location<<endl;                }                else{                    cout<<searchdata<<" was not found in the Hash Table."<<endl;                }                break;            case 5:                cout<<"Hash Table Contents :-"<<endl;                hashTable.display();                cout<<endl;                break;            case 6:                cout<<"Exiting program."<<endl;                break;            default:                cout<<"Invalid choice."<<endl;                break;        }    }while(choice != 6);}