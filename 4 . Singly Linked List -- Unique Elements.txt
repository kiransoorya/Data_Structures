#include<iostream>using namespace std;struct Node {    int data;    Node* link;};struct ListHead {    int count;    Node* head;};class SinglyLinkedList {    ListHead* newlist;public:    void createSLL() {        newlist = new ListHead;        newlist->count = 0;        newlist->head = NULL;    }    bool searchSLL(Node*& predecessor, Node*& successor, int target) {        predecessor = NULL;        successor = newlist->head;        while (successor != NULL && successor->data < target) {            predecessor = successor;            successor = successor->link;        }        if (successor == NULL) {            return false;        }        else if (successor->data == target) {            return true;        }        else {            return false;        }    }    bool insertSLL(int data) {        Node* predecessor = NULL;        Node* location = NULL;        bool found = searchSLL(predecessor, location, data);        if (!found) {            Node* newnode = new Node;            newnode->data = data;            if (predecessor == NULL) {                newnode->link = newlist->head;                newlist->head = newnode;            }            else {                newnode->link = predecessor->link;                predecessor->link = newnode;            }            newlist->count += 1;            return true;        }        else {            return false;        }    }    bool deleteSLL(int data) {        Node* predecessor;        Node* deletenode;        bool found = searchSLL(predecessor, deletenode, data);        if (found) {            if (newlist->count == 1) {                newlist->head = NULL;            }            if (predecessor == NULL) {                newlist->head = deletenode->link;            }            else {                predecessor->link = deletenode->link;            }            delete deletenode;            newlist->count -= 1;            return true;        }        else {            return false;        }    }    bool emptySLL() {        if (newlist->head == NULL) {            return true;        }        else {            return false;        }    }    int countSLL() {        return newlist->count;    }    void displayFromHead() {        cout << "Displaying from Head:-\n";        Node* walker = newlist->head;        while (walker != NULL) {            cout << walker->data << " ";            walker = walker->link;        }        cout << endl;    }    void Destroy() {        if (emptySLL()) {            return;        }        else {            Node* walker = newlist->head;            while (!emptySLL()) {                walker = newlist->head;                newlist->head = walker->link;                delete walker;            }            delete newlist;            cout << "Singly Linked List was Destroyed!" << endl;        }    }};int main() {    SinglyLinkedList mySLL;    int choice, data;    cout << "Singly Linked List Menu :-"<<endl;        cout << "1. Create Singly linked List\n2. Insert into Singly linked List\n3. Delete from Singly linked List\n4. Display Singly linked List\n5. Count of elements from Singly linked List\n6. Destroy Singly linked List\n7. Exit\n";    while (choice != 7){        cout << "Enter your choice: ";        cin >> choice;        switch (choice) {        case 1:            mySLL.createSLL();            cout<<"Singly linked List was created."<<endl;            break;        case 2:            cout << "Enter data to insert: ";            cin >> data;            if (mySLL.insertSLL(data)) {                cout << "Data inserted successfully."<<endl;            }            else {                cout << "Data already exists in the list."<<endl;            }            break;        case 3:            cout << "Enter data to delete: ";            cin >> data;            if (mySLL.deleteSLL(data)) {                cout << "Data deleted successfully."<<endl;            }            else {                cout << "Data not found in the list."<<endl;            }            break;        case 4:            mySLL.displayFromHead();            break;        case 5:            cout << "Count: " << mySLL.countSLL() << endl;            break;        case 6:            mySLL.Destroy();            break;        case 7:            cout << "Exiting program."<<endl;            break;        default:            cout << "Invalid choice. Please try again."<<endl;        }    }    return 0;}