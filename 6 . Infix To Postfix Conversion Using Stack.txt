#include<iostream>#include<cstring>using namespace std;struct Node{    char data;    Node* link;};struct ListHead{    Node* top;};class Stack{    ListHead* newlist;    public:    void createStack(){        newlist = new ListHead;        newlist->top = NULL;    }    void pushStack(char data){        Node* newnode = new Node;        newnode->data = data;        newnode->link = newlist->top;        newlist->top = newnode;    }     void popStack(){        if(!emptyStack()){            Node* datanode = newlist->top;            newlist->top = datanode->link;	    delete(datanode);        }    }    bool emptyStack(){        if(newlist->top == NULL){            return true;        }        else{            return false;        }    }    void destroyStack(){        Node* walker = newlist->top;        while(walker!=NULL){            walker = walker->link;        }        newlist->top = NULL;    }    char topStack(){        return newlist->top->data;    }};class infixToPostfix{    Stack myStack;    public:    infixToPostfix(){        myStack.createStack();    }    bool isOperator(char character){        if(character == '^'||character == '*'||character == '/'||character == '+'||character == '-')            return true;        else            return false;    }    int checkPriority(char character){        if(character == '^')            return 3;        else if(character == '*' || character == '/')            return 2;        else if(character == '+'|| character == '-')            return 1;        else            return 0;    }    string intopost(string formula){    string postfix = "";    char arr[formula.length() + 1];    strcpy(arr, formula.c_str());    for(int i = 0; i < formula.length(); i++){        if (arr[i] == '(') {            myStack.pushStack(arr[i]);        }        else if (arr[i] == ')') {            while (!myStack.emptyStack() && myStack.topStack() != '(') {                postfix += myStack.topStack();                myStack.popStack();            }            if (!myStack.emptyStack() && myStack.topStack() == '(') {                myStack.popStack();  // Pop the opening parenthesis            }        }        else if (isOperator(arr[i])) {            while (!myStack.emptyStack() && checkPriority(arr[i]) <= checkPriority(myStack.topStack())) {                postfix += myStack.topStack();                myStack.popStack();            }            myStack.pushStack(arr[i]);        }        else{            postfix += arr[i];        }    }    while (!myStack.emptyStack()) {	postfix+=myStack.topStack();    	myStack.popStack();    }    return postfix;}};int main(){    infixToPostfix object ;    string infix = "";    cout<<"Enter infix string :";    cin>>infix;    string postfix = object.intopost(infix);    cout<<"Enter postfix string :"<<postfix<<endl;}