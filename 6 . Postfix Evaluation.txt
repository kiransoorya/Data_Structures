#include <iostream>#include <cstring>#include <cmath>using namespace std;struct Node {    char data;    Node* link;};struct ListHead {    Node* top;};class Stack {    ListHead* newlist;public:    Stack() {  // Constructor to initialize the newlist        newlist = new ListHead;        newlist->top = NULL;    }    void pushStack(char data) {        Node* newnode = new Node;        newnode->data = data;        newnode->link = newlist->top;        newlist->top = newnode;    }    void popStack() {        if (!emptyStack()) {            Node* datanode = newlist->top;            newlist->top = datanode->link;            delete datanode; // Free the memory of the popped node        }    }    bool emptyStack() {        return (newlist->top == NULL);    }    void destroyStack() {        while (!emptyStack()) {            popStack();        }    }    char topStack() {        if (newlist->top != NULL) {            return newlist->top->data;        }        // Handle error when the stack is empty        return '\0';  // You can choose any value as an indicator for an empty stack    }};class postfixEvaluation {    Stack myStack;public:    bool isOperator(char character) {        return (character == '^' || character == '*' || character == '/' || character == '+' || character == '-');    }    int calculate(char oper1, char character, char oper2) {        int data1 = int(oper1) - '0'; // Convert char to int        int data2 = int(oper2) - '0'; // Convert char to int        if (character == '^') {            int value = pow(data1, data2);            return value;        } else if (character == '/')            return (data1 / data2);        else if (character == '*')            return (data1 * data2);        else if (character == '+')            return (data1 + data2);        else if (character == '-')            return (data1 - data2);        return 0; // Handle unsupported operators    }    int postfixEvaluate(string formula) {        int result;        for (int i = 0; i < formula.length(); i++) {            if (isOperator(formula[i])) {                char data2 = myStack.topStack();                myStack.popStack();                char data1 = myStack.topStack();                myStack.popStack();                int value = calculate(data1, formula[i], data2);                myStack.pushStack(char(value + '0')); // Convert int back to char and push it            } 	    else {                myStack.pushStack(formula[i]);            }        }        result = myStack.topStack();        return result - '0'; // Convert char to int before returning    }};int main() {    postfixEvaluation object;    string postfix = "";    cout << "Enter postfix string: ";    cin >> postfix;    int value = object.postfixEvaluate(postfix);    cout << "Value: " << value << endl;}