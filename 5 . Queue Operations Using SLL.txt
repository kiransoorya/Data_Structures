#include<iostream>using namespace std;struct Node{    int data;    Node* link;};struct ListHead{    int count;    Node* front;    Node* rear;};class Queue{    ListHead* newlist;    int status = 0;     public:    void createQueue(){        if(statusQueue() == 0){            newlist = new ListHead;            newlist->count = 0;            newlist->front = NULL;            newlist->rear = NULL;            cout<<"Queue created."<<endl;            status = 1;        }        else{            cout<<"Queue was already created."<<endl;        }    }    bool emptyQueue(){        if(statusQueue() == 1){            if(newlist->count == 0)                return true;            else                return false;        }        else{            cout<<"Create a queue to start."<<endl;            return false;        }    }    void enqueueQueue(int data){        if(statusQueue() == 1){            Node* newnode = new Node;            newnode->data = data;            newnode->link = NULL;            if(emptyQueue())                newlist->front = newnode;            else                newlist->rear->link = newnode;            newlist->rear = newnode;            newlist->count+= 1;        }        else{            cout<<"Create a queue to start."<<endl;        }    }    void dequeueQueue(){        if(statusQueue() == 1){            if(emptyQueue()){                cout<<"The Queue is empty."<<endl;            }            else{                Node* deletenode = newlist->front;                cout<<"The dequeued element is :"<<deletenode->data<<endl;                newlist->front = deletenode->link;                delete(deletenode);                newlist->count-= 1;            }        }        else{            cout<<"Create a queue to start."<<endl;        }    }    int countQueue(){        if(statusQueue() == 1)            return newlist->count;        else{            cout<<"Create a queue to start."<<endl;            return 0;        }    }    void destroyQueue(){        if(statusQueue() == 1){            Node* walker = newlist->front;            while(walker!= NULL){                Node* deletenode = walker;                walker = deletenode->link;                delete(deletenode);            }            delete(newlist);            status = 0;        }    }    int statusQueue(){        return status;    }    int getdataQueue(){        int data;        cout<<"Enter data to insert to Queue :";        cin>>data;        return data;    }    int elementFrontQueue(){        if(statusQueue() == 1){            if(!emptyQueue())                return newlist->front->data;            else                cout<<"Queue is empty."<<endl;        }        else{            cout<<"Create a queue to start."<<endl;            return 0;        }    }    int elementRearQueue(){        if(statusQueue() == 1){            if(!emptyQueue())                return newlist->rear->data;            else                cout<<"Queue is empty."<<endl;        }        else{            cout<<"Create a queue to start."<<endl;            return 0;        }    }};int main(){    Queue myQueue;    int choice,data;    bool status;    bool not_quit = true;    cout<<"Queue Operations:-"<<endl;    cout<<"1.Create queue\n2.Enqueue into queue\n3.Dequeue into queue\n4.Empty queue\n5.Count of node in queue\n6.Destroy queue\n7.Data from front of queue\n8.Data from rear of queue\n9.Quit"<<endl;    while(not_quit){        cout<<"Enter your choice :";        cin>>choice;        switch(choice){            case 1:                myQueue.createQueue();                break;            case 2:                if(myQueue.statusQueue() == 1){                    data = myQueue.getdataQueue();                    myQueue.enqueueQueue(data);                    cout<<"Data was enqueued into Queue"<<endl;                }                break;            case 3:                myQueue.dequeueQueue();                break;            case 4:                status = myQueue.emptyQueue();                if(myQueue.statusQueue() == 1){                    if(status)                        cout<<"The Queue is empty."<<endl;                    else                        cout<<"The Queue is not empty."<<endl;                }                break;            case 5:                data = myQueue.countQueue();                if(myQueue.statusQueue() == 1)                    cout<<"The number of elements in Queue :"<<data<<endl;                break;            case 6:                cout<<"Destroy Queue initiated"<<endl;                myQueue.destroyQueue();                if(myQueue.statusQueue() == 0)                    cout<<"Queue was destroyed"<<endl;                break;            case 7:                if(myQueue.statusQueue() == 1)                    if(!myQueue.emptyQueue())                        cout<<"The data from front of Queue :"<<myQueue.elementFrontQueue()<<endl;                break;            case 8:                if(myQueue.statusQueue() == 1)                    if(!myQueue.emptyQueue())                        cout<<"The data from rear of Queue :"<<myQueue.elementRearQueue()<<endl;                break;            case 9:                not_quit = false;                break;            default:                cout<<"Invalid choice.Choose a correct option."<<endl;                break;        }    }}