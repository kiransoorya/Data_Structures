#include<iostream>using namespace std;struct GraphArc;struct GraphVertex{    char data;    bool inqueue,processed;    GraphArc* firstarc;    GraphVertex* nextvertex;};struct GraphArc{    GraphVertex* content;    GraphArc* nextarc;};struct Node{    GraphVertex* vertex;    Node* link;};class Queue{    private:        Node* front;        Node* rear;    public:        int count;        Queue(){            count = 0;            front = NULL;            rear = NULL;        }        void Enqueue(GraphVertex* vertex){            Node* newnode = new Node;            newnode->vertex = vertex;            newnode->link = NULL;            if(front == NULL){                front = newnode;                rear = newnode;            }            else{                rear->link = newnode;                rear = newnode;            }            count+=1;        }        GraphVertex* Dequeue(){            Node* deletenode = front;            GraphVertex* vertex = deletenode->vertex;            front = front->link;            delete deletenode;            count-=1;            return vertex;        }};class Graph{    GraphVertex* first;    int count;    public:        Graph(){            count = 0;            first = NULL;        }        void InsertVertex(char x){            GraphVertex* newvertex = new GraphVertex;            newvertex->data = x;            newvertex->inqueue = false;            newvertex->processed = false;            newvertex->firstarc = NULL;            newvertex->nextvertex = NULL;            if(first == NULL){                first = newvertex;            }            else{                GraphVertex* vertexwalker = first;                while(vertexwalker->nextvertex!=NULL){                    vertexwalker = vertexwalker->nextvertex;                }                vertexwalker->nextvertex = newvertex;            }            count+=1;            cout<<"Vertex "<<newvertex->data<<" was inserted"<<endl;        }        bool InsertArc(char x,char y){            GraphVertex* xvertex = NULL;            GraphVertex* yvertex = NULL;            GraphVertex* xwalker = first;            GraphVertex* ywalker = first;            while(xwalker!=NULL && xwalker->data != x){                xwalker = xwalker->nextvertex;            }            while(ywalker!=NULL && ywalker->data != y){                ywalker = ywalker->nextvertex;            }            if(xwalker == NULL || ywalker == NULL){                return false;            }            else{                xvertex = xwalker;                yvertex = ywalker;            }            GraphArc* xarc = new GraphArc;            xarc->content = yvertex;            xarc->nextarc = NULL;            if(xvertex->firstarc == NULL){                xvertex->firstarc = xarc;            }            else{                GraphArc* xarcwalker = xvertex->firstarc;                while(xarcwalker->nextarc!=NULL){                    xarcwalker = xarcwalker->nextarc;                }                xarcwalker->nextarc =xarc;            }            GraphArc* yarc = new GraphArc;            yarc->content = xvertex;            yarc->nextarc = NULL;            if(yvertex->firstarc == NULL){                yvertex->firstarc = yarc;            }            else{                GraphArc* yarcwalker = yvertex->firstarc;                while(yarcwalker->nextarc!=NULL){                    yarcwalker = yarcwalker->nextarc;                }                yarcwalker->nextarc =yarc;            }        }        void BreadthFirstTraversal(){            Queue q;            GraphVertex* vertexWalker = first;            while (vertexWalker != NULL) {                vertexWalker->inqueue = false;                vertexWalker->processed = false;                vertexWalker = vertexWalker->nextvertex;            }            q.Enqueue(first);            cout<<"Breadth First Traversal:-"<<endl;            while(q.count!=0){                GraphVertex* dequeued = q.Dequeue();                cout<<dequeued->data<<"\t";                dequeued->inqueue = false;                dequeued->processed = true;                GraphArc* arc = dequeued->firstarc;                while(arc!=NULL){                    if((arc->content->processed != true) && (arc->content->inqueue != true)){                        q.Enqueue(arc->content);                        arc->content->inqueue = true;                    }                    arc = arc->nextarc;                }            }            cout<<endl;        }};int main(){    Graph g;    int choice;    char x , y;    cout<<"1 .Insert Vertex\n2 .Insert Edge\n3 .Breadth First Traversal\n4 .Exit"<<endl;    do{        cout<<"Enter choice :";        cin>>choice;        switch(choice){            case 1:                cout<<"Enter character to insert :";                cin>>x;                g.InsertVertex(x);                break;            case 2:                cout<<"Enter characters to add edge :-"<<endl;                cout<<"Enter edge 1 :";                cin>>x;                cout<<"Enter edge 2 :";                cin>>y;                if(g.InsertArc(x,y)){                    cout<<"Edge inserted between "<<x<<" & "<<y<<"."<<endl;                }                else{                    cout<<"Either one or both vertices not present in graph."<<endl;                }                break;            case 3:                g.BreadthFirstTraversal();                break;            case 4:                cout<<"Exiting..."<<endl;                break;            default:                cout<<"Wrong input entered."<<endl;        }    }while(choice!=4);}