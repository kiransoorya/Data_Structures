#include<iostream>using namespace std;struct Node{  int data;  Node* link;};struct ListHead{  int count;  Node* top;};class Stack{    ListHead* newlist;    int status = 0;    public:    void createStack(){        if(status == 0){            newlist = new ListHead;            newlist->count = 0;            newlist->top = NULL;            status = 1;            cout<<"Stack created."<<endl;        }        else{            cout<<"Stack was already created."<<endl;        }    }    bool pushStack(int data,int& position){        if(status == 1){            bool found = searchStack(data,position);            if(!found){                Node* newnode = new Node;                newnode->data = data;                newnode->link = newlist->top;                newlist->top = newnode;                newlist->count += 1;                return true;            }            else                return false;        }        else            cout<<"Create a stack to start."<<endl;    }    bool searchStack(int data, int& position) {        if(status == 1){            Node* walker = newlist->top;            position = 1;            while (walker != NULL) {                if (walker->data == data)                    return true;                walker = walker->link;                position += 1;            }            position = -1;            return false;        }        else            cout<<"Create a stack to start."<<endl;    }    void popStack(){        if(status == 1){            if(!emptyStack()){                Node* datanode = newlist->top;                cout<<"Top most data was :"<<datanode->data<<endl;                newlist->top = datanode->link;                newlist->count -= 1;                if(newlist->top == NULL)                    cout<<"Top was popped.\nTop is empty."<<endl;                else if(newlist->top != NULL)                    cout<<"Top was popped.\nNew top is "<<topStack()<<"."<<endl;            }            else                cout<<"The stack is empty"<<endl;        }        else            cout<<"Create a stack to start."<<endl;    }    bool emptyStack(){        if(status == 1){            if(newlist->count == 0)                return true;            else                return false;        }        else            cout<<"Create a stack to start."<<endl;    }    int countStack(){        if(status == 1){            return newlist->count;        }        else            cout<<"Create a stack to start."<<endl;    }    void destroyStack(){        if(status == 1){	        Node* temp;            Node* walker = newlist->top;            while(walker!=NULL){	            temp = walker;                walker = walker->link;	            delete(temp);            }            newlist->top = NULL;            newlist->count = 0;            delete(newlist);        }        else            cout<<"Create a stack to start."<<endl;    }    int topStack(){        if(status == 1){            return newlist->top->data;        }        else            cout<<"Create a stack to start."<<endl;    }};int main(){    int data;    int position;    int choice;    bool not_quit = true;    bool status;    Stack myStack;    cout<<"Stack Implementation :-"<<endl;        cout<<"1.Create Stack\n2.Push element into stack\n3.Pop from stack\n4.Check if stack is empty\n5.Number of elements in stack\n6.Destroy stack\n7.Find top of stack\n8.Quit"<<endl;    while(not_quit){        cout<<"Enter choice :";        cin>>choice;        switch(choice){            case 1:                myStack.createStack();                break;           case 2:                position = 0;                cout<<"Enter element to input into stack:";                cin>>data;                status = myStack.pushStack(data,position);                if(status == true)                    cout<<"Pushed into Stack"<<endl;                else{                    if(position!=-1)                        cout<<"The element was found at :"<<position<<endl;                    else                        cout<<"The element wasn't found in Stack."<<endl;                }                break;            case 3:                myStack.popStack();                break;            case 4:                if(myStack.emptyStack())                    cout<<"Stack is empty."<<endl;                else                    cout<<"Stack is not empty."<<endl;                break;            case 5:                data = myStack.countStack();                cout<<"The number of the elements in stack is :"<<data<<endl;                break;            case 6:                cout<<"Destroy stack initiated"<<endl;                myStack.destroyStack();                cout<<"Stack was destroyed"<<endl;                break;            case 7:                data = myStack.topStack();                cout<<"The top of stack :"<<data<<endl;                break;            case 8:                not_quit = false;                break;            default:                cout<<"Invalid option.Choose a correct option."<<endl;                break;       }    }    }