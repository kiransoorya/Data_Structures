#include<iostream>using namespace std;class Queue{	int front;	int rear;	int Array_size;	double *Array;	public:	Queue(){		this->getArray_size();		Array = new double[Array_size];		front = -1;		rear = -1;	}	void getArray_size(){		cout<<"Enter the size of the array:";		cin>>Array_size;		}	int Queue_count(){		if(this->Array_is_empty())		{			return 0;		}		else{			return rear-front+1;		}	}	bool Array_is_empty(){		if (rear == -1 && front == -1){			cout<<"Queue is empty."<<endl;						return true;		}		else{			return false;				}	}	bool Array_is_full(){		if (rear == Array_size-1){			cout<<"Queue is full."<<endl;			return true;		}		else{			return false;				}	}	bool Enqueue(double &dataIn){		bool Success;		if(this->Array_is_full()){			cout<<"Can't add elements."<<endl;			Success = false;		}		else{			rear+=1;			*(Array+rear) = dataIn;			if(front ==-1){				front = 0;						}			Success = true;		}		return Success;		}	bool Dequeue(double &dataOut){		bool Success;		if(this->Array_is_empty()){			cout<<"Can't remove elements."<<endl;			Success = false;		}		else{			dataOut = *(Array+front);			if(front==rear){				front = -1;				rear = -1;					}			else{								front+=1;			}			Success = true;		}		return 	Success;	}	bool Queuefront(double &dataOut){		bool Success;		if(this->Array_is_empty()){			Success = false;		}		else{			dataOut = *(Array+front);			Success = true;		}		return Success;	}	bool Queuerear(double &dataOut){		bool Success;		if(this->Array_is_empty()){			Success = false;		}		else{			dataOut = *(Array+rear);			Success = true;		}		return Success;	}	double getElementFromUser(){		double element;		cout<<"Enter Element:";		cin>> element;		return element;		}	};int main(){	Queue newArray;	bool not_quit = true;	while(not_quit){		int choice;		cout<<"Enter choice to do function 1)Enqueue 2)Dequeue 3)Check Front of Queue 4)Check Rear of Queue 5)Number of elements in queue 6) Quit :";		cin>>choice;		double queuedata ;		int count;		bool is_Success;		switch(choice){			case 1:				queuedata = newArray.getElementFromUser();				newArray.Enqueue(queuedata);				break;			case 2:				is_Success = newArray.Dequeue(queuedata);				if(is_Success){					cout<<"Popped element is : "<<queuedata<<endl;				}				break;			case 3:			        	is_Success = newArray.Queuefront(queuedata);				if(is_Success){					cout<<"Front element is : "<<queuedata<<endl;				}				break;			case 4:				is_Success = newArray.Queuerear(queuedata);				if(is_Success){					cout<<"Rear element is : "<<queuedata<<endl;				}				break;			case 5:				count = newArray.Queue_count();				cout<<"Number of elements is:"<<count<<endl;				break;			case 6:				not_quit = false;				break;					}	}	return 0;}